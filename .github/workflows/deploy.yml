name: Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: boosterslog-api
  ECS_CLUSTER: boosterslog-cluster
  ECS_SERVICE: boosterslog-api-service
  ECS_TASK_DEFINITION: boosterslog-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: service/ecs-task-definition.json
          container-name: api
          image: ${{ steps.build-image.outputs.image }}

      - name: Replace environment variables in task definition
        run: |
          # Get AWS account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Replace all environment variables
          sed -i "s/\${AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g" ${{ steps.task-def.outputs.task-definition }}
          sed -i "s/\${AWS_REGION}/${{ env.AWS_REGION }}/g" ${{ steps.task-def.outputs.task-definition }}
          sed -i 's/${DATABASE_NAME}/${{ secrets.DATABASE_NAME }}/g' ${{ steps.task-def.outputs.task-definition }}
          sed -i 's/${DATABASE_USERNAME}/${{ secrets.DATABASE_USERNAME }}/g' ${{ steps.task-def.outputs.task-definition }}
          sed -i 's/${DATABASE_PASSWORD}/${{ secrets.DATABASE_PASSWORD }}/g' ${{ steps.task-def.outputs.task-definition }}
          sed -i 's/${DATABASE_HOST}/${{ secrets.DATABASE_HOST }}/g' ${{ steps.task-def.outputs.task-definition }}
          sed -i 's/${DATABASE_PORT}/${{ secrets.DATABASE_PORT }}/g' ${{ steps.task-def.outputs.task-definition }}
          sed -i 's/${SECRET_KEY_BASE}/${{ secrets.SECRET_KEY_BASE }}/g' ${{ steps.task-def.outputs.task-definition }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
